apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.imadji.arch.sample"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionProperties.code
        versionName versionProperties.name
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
            storeFile file('../keystore/debug.keystore')
        }
        release {
            keyAlias 'archsamplekey'
            keyPassword keystoreProperties.keyPassword
            storePassword keystoreProperties.storePassword
            storeFile file('../keystore/release.keystore')
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard-debug.pro"
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard.pro"
        }
    }

    flavorDimensions "environment"

    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            signingConfig signingConfigs.debug
            resValue "string", "app_name", "Arch Sample Dev"
        }
        prod {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Arch Sample"
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }

    android.applicationVariants.all { variant ->
        def apkName = "arch-sample"
        apkName += "-" + variant.versionName
        variant.outputs.all {
            outputFileName = apkName + ".apk"
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.appCompat
    implementation rootProject.ext.materialDesign
    implementation rootProject.ext.legacySupport
    implementation rootProject.ext.recyclerView
    implementation rootProject.ext.constraintLayout

    /* Android Architecture Components */
    implementation rootProject.ext.archLifecycleExtensions
    implementation rootProject.ext.archLifecycleCommon

    /* Butterknife for inject Views */
    implementation rootProject.ext.butterknife
    annotationProcessor rootProject.ext.butterknifeCompiler

    /* Glide for Image Loading */
    implementation rootProject.ext.glide
    implementation rootProject.ext.glideTansformation
    annotationProcessor rootProject.ext.glideCompiler

    /* Firebase */
    implementation rootProject.ext.firebaseAnalytics

    /* RxJava RxAndroid */
    implementation rootProject.ext.rxJava
    implementation rootProject.ext.rxAndroid

    /* Retrofit */
    implementation rootProject.ext.retrofit
    implementation rootProject.ext.retrofitGson
    implementation rootProject.ext.retrofitRxJava

    /* Dagger for Dependency Injection */
    implementation rootProject.ext.dagger
    annotationProcessor rootProject.ext.daggerCompiler

    /* Test Libs */
    testImplementation rootProject.ext.jUnit
    testImplementation rootProject.ext.robolectric
    testImplementation rootProject.ext.lifecycleTest
    androidTestImplementation rootProject.ext.androidTestRunner
    androidTestImplementation rootProject.ext.espressoCore

    implementation project(':domain')
    implementation project(':data')
}

apply plugin: 'com.google.gms.google-services'
